#!/bin/bash -
#title           : interface
#description     : Interface to run Bellman Ford on a router
#author		     : Keisuke Suzuki
#date			 : 5/13/20
#usage		     : ./interface
#notes           : Not completed yet
#==============================================================================

source utils
[ -n .env ] && source .env

# Usage help
script_usage() {
    cat << EOF
Usage:
     -h|--help                 Displays this help
     -d|--dist   <node-name>   Get distance from current node to <node-name>
     -r|--run    <node-name>   Run Bellman Ford from <node-name>
     -l|--log    <node-name>   log mtr result one <node-name>
EOF
}

# Run mtr to given destination
# @params:
##    $1: Name of destination node (b-ford)
create_log() {
    options="--report --no-dns"
    if [[ $# -gt 1 ]]; then
        echo "Invalid number of parameters"
        script_usage
        exit 0
    else
        case ${1:-b-ford} in
            "b-ford")
                echo "Already in the root"
                ;;
            "cerf")
                mtr 10.10.1.1 "$options"
                ;;
            "knuth")
                mtr 10.10.8.2 "$options"
                ;;
            "lovelace")
                mtr 10.10.4.1 "$options"
                ;;
            "hopper")
                mtr 10.10.3.1 "$options"
                ;;
            "baran")
                mtr 10.10.5.2 "$options"
                ;;
        esac
    fi
}

# Run bellman ford
run_bellman_ford() {
    if [[ $# -gt 1 ]]; then
        echo "Please run with one argument"
        script_usage
        exit 0
    else
        # Build program if it has not been built yet
        mkdir -p build
        if [ ! -f "build/network" ]; then
            cd build && cmake .. && make && cd ..
        fi

        ## execute and log the results
        echo -e '\nRunning the Algorithm ...\n'
        ./build/network "${1:input-files/edges.csv}"
    fi
}

# Get distance and redirect the output
get_distance() {
    echo "Getting distance"
    ssh -p 27211 $host_addr \
        -t "echo -e 'bf-lovelace:' &&
            ping -c 25 10.10.4.1 | tail -1 | awk '{print $4}' | cut -d '/' -f 5 &&
            echo -e 'bf-baran:' &&
            ping -c 25 10.10.5.2 | tail -1 | awk '{print $4}' | cut -d '/' -f 5"
    # knuth
    echo "At knuth"
    ssh -p 27214 $host_addr \
        -t "echo -e 'knuth-hopper:' &&
            ping -c 25 10.10.6.1 | tail -1 | awk '{print $4}' | cut -d '/' -f 5 &&
            echo -e 'knuth-cerf:' &&
            ping -c 25 10.10.7.2 | tail -1 | awk '{print $4}' | cut -d '/' -f 5"
    # lovelace
    echo "At lovelace"
    ssh -p 27215 $host_addr \
        -t "echo -e 'lovelace-knuth:' &&
            ping -c 25 10.10.8.2 | tail -1 | awk '{print $4}' | cut -d '/' -f 5 &&
            echo -e 'lovelace-hopper:' &&
            ping -c 25 10.10.3.1 | tail -1 | awk '{print $4}' | cut -d '/' -f 5"
    # baran
    echo "At baran"
    ssh -p 27210 $host_addr \
        -t "echo -e 'baran-cerf:' &&
            ping -c 25 10.10.1.1 | tail -1 | awk '{print $4}' | cut -d '/' -f 5"
    # cerf
    echo "At cerf"
    ssh -p 27212 $host_addr \
        -t "echo -e 'cerf-hopper:' &&
            ping -c 25 10.10.2.1 | tail -1 | awk '{print $4}' | cut -d '/' -f 5"
}

# Parameter parser
parse_params() {
    local param
    while [[ $# -gt 0 ]]; do
        param="$1"
        shift
        case $param in
            -h | --help)
                script_usage
                exit 0
                ;;
            -d | --dist)
                get_distance > distances.txt
                exit 0
                ;;
            -l | --log)
                create_log "$@"
                exit 0
                ;;
            -r | --run)
                run_bellman_ford "$@"
                exit 0
                ;;
            *)
                script_exit "Invalid parameter was provided: $param" 1
                ;;
        esac
    done
}

# Show usage if no arguments are provided, otherwise, parse parameters
main() {
    if [[ $# -eq 0 ]]; then
        script_usage
        exit 0
    else
        parse_params "$@"
    fi
}

main "$@"
